{"name":"Motion-layouts","body":"# Layouts for RubyMotion\r\n\r\nA DSL for creating layouts easily in RubyMotion.  Also comes bundled with a\r\nset of categories to make life easier.  I'm using the word category from\r\nobjective-c land which is basically the same as re-opening classes in ruby :D.\r\n\r\n## Getting started\r\n\r\nAdd motion-layouts as a git submodule of your RubyMotion project:\r\n\r\n    git clone https://github.com/malkomalko/motion-layouts.git vendor/motion-layouts\r\n\r\nAdd the motion-layouts lib path to your project 'Rakefile'\r\n\r\n```ruby\r\nMotion::Project::App.setup do |app|\r\n  app.name = 'myapp'\r\n  app.files.unshift(Dir.glob(File.join(app.project_dir, 'vendor/motion-layouts/lib/**/*.rb')))\r\nend\r\n```\r\n\r\nNow, you can use motion-layouts to start making some layouts.\r\n\r\nI put all my layouts by convention into app/layouts but feel free to do\r\nwhatever you want.\r\n\r\n## Define a layout\r\n\r\n```ruby\r\nclass NameEditorLayout\r\n  include Layouts::Base\r\n\r\n  def self.template\r\n    UIToolbar {\r\n      anchor 'top'\r\n      height 50\r\n      resize :top, :right, :left, :width\r\n      items [\r\n        ['Cancel', 'cancel'],\r\n        [:flexible_space],\r\n        ['Done', 'done']\r\n      ]\r\n    }\r\n    UITextField {\r\n      id 'nameTextField'\r\n      delegate @controller\r\n      top 90\r\n      width 85.percent\r\n      align 'center'\r\n      text_color '222222'\r\n      background_color 'FFFFFF'\r\n      border_style 'rounded'\r\n      resize :top, :right, :left, :width\r\n      placeholder 'Enter the photo album name'\r\n    }\r\n  end\r\nend\r\n```\r\n\r\nYou start by including Layouts::Base and defining a self.template method.\r\n\r\n## Instantiate your view (from controller)\r\n\r\n```ruby\r\n  def viewWillAppear(animated)\r\n    super\r\n    view.fromLayout(NameEditorLayout, self)\r\n  end\r\n```\r\n\r\nboom.. that's it, you should see a toolbar and a text field in your view.\r\n\r\n## How it works\r\n\r\nThe project includes a mixture of categories and nodes.\r\n\r\nNodes are the entry point inside self.template in your layout:\r\n\r\n```ruby\r\nclass NameEditorLayout\r\n  include Layouts::Base\r\n\r\n  def self.template\r\n    UIToolbar {\r\n      ...\r\n    }\r\n    UITextField {\r\n      ...\r\n    }\r\n  end\r\nend\r\n```\r\n\r\nEvery node inherits from LayoutBase which sets up a lot of shared functionality\r\nand handles proper instantiation.\r\n\r\nYou have access to a few instance variables inside each node:\r\n\r\n```\r\n@parent - the parent view\r\n@view - the current view\r\n@controller - the controller who instantiated the view via view.fromLayout\r\n```\r\n\r\nEvery node can also set a defaults hash.\r\n\r\nLet's take a look at the UITextField node:\r\n\r\n```ruby\r\nmodule Layouts\r\n  class UITextField < LayoutBase\r\n    def self.defaults\r\n      {\r\n        width: @parent.bounds.size.width * 0.90,\r\n        height: 30\r\n      }\r\n    end\r\n\r\n    def border_style(style)\r\n      @view.borderStyle = ::UITextField::BORDER_STYLES.fetchWithDefault(style)\r\n    end\r\n\r\n    def placeholder(text)\r\n      @view.placeholder = text\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThis is where the categories come in.  To make defining these nodes as easy\r\nas possible, I'm creating a collection of categories to make the process\r\nas smooth as can be.\r\n\r\nTake a look inside the lib/layouts/categories folder to see some of the\r\nhelpers I've defined for you.\r\n\r\n## Todo\r\n\r\nTests Tests Tests.  This was mostly thrown together very quickly as a POC,\r\nbut there is nothing complex going on here.\r\n\r\nFilling out a complete set of nodes.  I'm throwing this out now in hopes that\r\npeople can create wrapper nodes for all the missing standard UI classes.\r\n\r\n## Thanks\r\n\r\nQuick thanks to https://github.com/mattetti/BubbleWrap for letting me gut\r\ntheir README.md and for suggesting a rather nice convention for installing\r\ncustom libs into the vendor directory until something else better comes\r\nalong.\r\n\r\nAlso, thanks to Laurent and the whole RubyMotion community for making iOS\r\nprogramming fun to learn.\r\n","tagline":"A DSL for creating layouts easily in RubyMotion. Also comes bundled with a set of categories to make life easier.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}